(ns smeghead\schema
  (:use \Phel\Lang\Symbol)
  (:use \Smeghead\PhelSchema\ZodError)
  (:require smeghead\schema\interfaces :refer [valid message])
  (:require smeghead\schema\type\number)
  (:require smeghead\schema\type\string))

(defmacro- proxy [namespace symbols]
  `(do ,@(loop [symbols symbols
                acc []]
     (if (empty? symbols)
       acc
       (recur (rest symbols)
              (push
                acc
                (let [s (name (first symbols))]
                  `(defn ,(php/new Symbol nil s) [& args]
                     (apply ,(php/new Symbol namespace s) args)))))))))

(proxy "smeghead\schema\\type\string" [:string :max :min :length :regex])

(proxy "smeghead\schema\\type\\number" [:number :gt :gte :lt :lte :int :positive :nonnegative :negative :nonpositive])

(defn- validate [schema target]
  (loop [rules (schema :rules)
         acc []]
    (if (empty? rules)
      acc
      (let [rule (first rules)]
        (if (valid rule target)
          (recur (rest rules) acc)
          (recur (rest rules) (push acc {:message (message rule)})))))))

(defn safe-parse [schema target]
  (let [issues (validate schema target)]
    (if (empty? issues)
      {:success true :data target}
      {:success false :error (php/:: ZodError (create "Zod Error" (to-php-array issues)))})))

(defn parse [schema target]
  (let [result (safe-parse schema target)]
    (if (result :success)
      (result :data)
      (throw (result :error)))))
