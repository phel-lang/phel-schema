(ns phel\tests\unit\schema\type\string
  (:require phel\test :refer [deftest is])
  (:require phel\schema :as z))

(deftest test-string-min-ok
  (let [my-schema (as-> (z/string) s
                    (z/min s 5))
        result (z/safe-parse my-schema "tunat")]
    (is (= true (result :success)))
    (is (= "tunat" (result :data)))))

(deftest test-string-min-ng
  (let [my-schema (as-> (z/string) s
                    (z/min s 5))
        result (z/safe-parse my-schema "tuna")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Phel\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too short" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-string-min-ng-message-customize
  (let [my-schema (as-> (z/string) s
                    (z/min s 5 {:message "toooo short"}))
        result (z/safe-parse my-schema "tuna")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Phel\PhelSchema\ZodError" (php/get_class error)))
      (is (= "toooo short" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-string-max-ok
  (let [my-schema (as-> (z/string) s
                    (z/max s 5))
        result (z/safe-parse my-schema "tunat")]
    (is (= true (result :success)))
    (is (= "tunat" (result :data)))))

(deftest test-string-max-ng
  (let [my-schema (as-> (z/string) s
                    (z/max s 5))
        result (z/safe-parse my-schema "tunatuna")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Phel\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too long" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-string-max-ng-message-customize
  (let [my-schema (as-> (z/string) s
                    (z/max s 5 {:message "toooo long"}))
        result (z/safe-parse my-schema "tunatuna")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Phel\PhelSchema\ZodError" (php/get_class error)))
      (is (= "toooo long" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-string-length-ok
  (let [my-schema (as-> (z/string) s
                    (z/length s 5))
        result (z/safe-parse my-schema "tunat")]
    (is (= true (result :success)))
    (is (= "tunat" (result :data)))))

(deftest test-string-length-ng
  (let [my-schema (as-> (z/string) s
                    (z/length s 5))
        result (z/safe-parse my-schema "tunatuna")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Phel\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Wrong length" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-string-regex-ok
  (let [my-schema (as-> (z/string) s
                    (z/regex s "/^tuna/"))
        result (z/safe-parse my-schema "tuna")]
    (is (= true (result :success)))
    (is (= "tuna" (result :data)))))

(deftest test-string-regex-ng
  (let [my-schema (as-> (z/string) s
                    (z/regex s "/^tuna/"))
        result (z/safe-parse my-schema "fish")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Phel\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Not match" (get-in (php/-> error (getissues)) [0 :message]))))))
