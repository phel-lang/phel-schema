(ns smeghead\tests\unit\schema\type\number
  (:require phel\test :refer [deftest is])
  (:require smeghead\schema :as z))

(deftest test-number-gt-ok
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5))
        result (z/safe-parse my-schema 6)]
    (is (= true (result :success)))
    (is (= 6 (result :data)))))

(deftest test-like-number-gt-ok
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5))
        result (z/safe-parse my-schema "6")]
    (is (= true (result :success)))
    (is (= "6" (result :data)))))

(deftest test-number-gt-ng
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5))
        result (z/safe-parse my-schema 5)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too small" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-number-gt-ng-message-customize
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5 {:message "toooo small"}))
        result (z/safe-parse my-schema 5)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "toooo small" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-number-gte-ok
  (let [my-schema (as-> (z/number) s
                    (z/gte s 5))
        result (z/safe-parse my-schema 5)]
    (is (= true (result :success)))
    (is (= 5 (result :data)))))

(deftest test-number-gte-ng
  (let [my-schema (as-> (z/number) s
                    (z/gte s 5))
        result (z/safe-parse my-schema 4)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too small" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-number-lt-ok
  (let [my-schema (as-> (z/number) s
                    (z/lt s 5))
        result (z/safe-parse my-schema 4)]
    (is (= true (result :success)))
    (is (= 4 (result :data)))))

(deftest test-number-lt-ng
  (let [my-schema (as-> (z/number) s
                    (z/lt s 5))
        result (z/safe-parse my-schema 5)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too large" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-number-lte-ok
  (let [my-schema (as-> (z/number) s
                    (z/lte s 5))
        result (z/safe-parse my-schema 5)]
    (is (= true (result :success)))
    (is (= 5 (result :data)))))

(deftest test-number-lte-ng
  (let [my-schema (as-> (z/number) s
                    (z/lte s 5))
        result (z/safe-parse my-schema 6)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too large" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-number-int-ok
  (let [my-schema (as-> (z/number) s
                    (z/int s))
        result (z/safe-parse my-schema "5")]
    (is (= true (result :success)))
    (is (= "5" (result :data)))))

(deftest test-number-int-ok-negative
  (let [my-schema (as-> (z/number) s
                    (z/int s))
        result (z/safe-parse my-schema "-5")]
    (is (= true (result :success)))
    (is (= "-5" (result :data)))))

(deftest test-number-int-ng
  (let [my-schema (as-> (z/number) s
                    (z/int s))
        result (z/safe-parse my-schema "a")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Invalid type" (get-in (php/-> error (getissues)) [0 :message])))
      (is (= "Not integer" (get-in (php/-> error (getissues)) [1 :message]))))))

(deftest test-number-int-ng-float
  (let [my-schema (as-> (z/number) s
                    (z/int s))
        result (z/safe-parse my-schema "100.3")]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Not integer" (get-in (php/-> error (getissues)) [0 :message]))))))
