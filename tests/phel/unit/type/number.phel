(ns smeghead\tests\unit\schema\type\number
  (:require phel\test :refer [deftest is])
  (:require smeghead\schema :as z))

(deftest test-number-gt-ok
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5))
        result (z/safe-parse my-schema 6)]
    (is (= true (result :success)))
    (is (= 6 (result :data)))))

(deftest test-like-number-gt-ok
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5))
        result (z/safe-parse my-schema "6")]
    (is (= true (result :success)))
    (is (= "6" (result :data)))))

(deftest test-number-gt-ng
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5))
        result (z/safe-parse my-schema 5)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Too small" (get-in (php/-> error (getissues)) [0 :message]))))))

(deftest test-number-gt-ng-message-customize
  (let [my-schema (as-> (z/number) s
                    (z/gt s 5 {:message "toooo small"}))
        result (z/safe-parse my-schema 5)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "toooo small" (get-in (php/-> error (getissues)) [0 :message]))))))

