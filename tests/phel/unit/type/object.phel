(ns phel\tests\unit\schema\type\object
  (:require phel\test :refer [deftest is])
  (:require phel\schema :as z))

(deftest test-object-have-string-ok
  (let [my-schema (z/object {:username (z/string)})
        result (z/safe-parse my-schema {:username "Jeff Beck"})]
    (is (= true (result :success)))
    (is (= {:username "Jeff Beck"} (result :data)))))

(deftest test-object-have-string-ng
  (let [my-schema (z/object {:username (z/string)})
        result (z/safe-parse my-schema {:username 123})]
    (is (= false (result :success)))
    (is (= "Phel\PhelSchema\ZodError" (php/get_class (result :error))))
    (is (= "Invalid type" (get-in (result :issues) [0 :message])))
    (is (= [:username] (get-in (result :issues) [0 :paths])))))

(deftest test-nested-object-have-string-ng
  (let [my-schema (z/object {
                    :user (z/object {
                            :username (z/string)})})
        result (z/safe-parse my-schema {:user {:username 123}})]
    (is (= false (result :success)))
    (is (= "Phel\PhelSchema\ZodError" (php/get_class (result :error))))
    (is (= "Invalid type" (get-in (result :issues) [0 :message])))
    (is (= [:user :username] (get-in (result :issues) [0 :paths])))))
