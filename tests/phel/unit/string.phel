(ns smeghead\tests\unit\string
  (:require phel\test :refer [deftest is])
  (:require smeghead\schema :as z))

(deftest test-string-parse-ok
  (let [my-schema (z/string)]
    (is (= "tuna" (z/parse my-schema "tuna")))))

(deftest test-string-parse-ng
  (let [my-schema (z/string)]
    (is (thrown? \Exception (z/parse my-schema 12)))))

(deftest test-string-safe-parse-ok
  (let [my-schema (z/string)
        result (z/safe-parse my-schema "tuna")]
    (is (= true (result :success)))
    (is (= "tuna" (result :data)))))

(deftest test-string-safe-parse-ng
  (let [my-schema (z/string)
        result (z/safe-parse my-schema 12)]
    (is (= false (result :success)))
    (let [error (result :error)]
      (is (= "Smeghead\PhelSchema\ZodError" (php/get_class error)))
      (is (= "Invalid type" (get-in (php/-> error (getIssues)) [0 :message]))))))

